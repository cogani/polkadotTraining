1.


struct Container(i32, i32);


// USING associated types to re-implement trait Contains.
// trait Contains {
//    type A;
//    type B;


trait Contains<A, B> {
    fn contains(&self, _: &A, _: &B) -> bool;
    fn first(&self) -> i32;
    fn last(&self) -> i32;
}


impl Contains<i32, i32> for Container {
    fn contains(&self, number_1: &i32, number_2: &i32) -> bool {
        (&self.0 == number_1) && (&self.1 == number_2)
    }
    // Grab the first number.
    fn first(&self) -> i32 { self.0 }


    // Grab the last number.
    fn last(&self) -> i32 { self.1 }
}


fn difference<A, B, C: Contains<A, B>>(container: &C) -> i32 {
    container.last() - container.first()
}


fn main() {
    let number_1 = 3;
    let number_2 = 10;


    let container = Container(number_1, number_2);


    println!("Does container contain {} and {}: {}",
        &number_1, &number_2,
        container.contains(&number_1, &number_2));
    println!("First number: {}", container.first());
    println!("Last number: {}", container.last());
    
    println!("The difference is: {}", difference(&container));
}




2.
impl<T: Sub<Output = T>> Sub<Self> for Point<T> {
    type Output = Self;


    fn sub(self, other: Self) -> Self::Output {
        Point {
            x: self.x - other.x,
            y: self.y - other.y,
        }
    }
}


impl<T: Sub<Output = T>> Sub<Point<T>> for Point<T> {
    type Output = Self;


    fn sub(self, other: Self) -> Self::Output {
        Point {
            x: self.x - other.x,
            y: self.y - other.y,
        }
    }
}


impl<T: Sub<Output = T>> Sub for Point<T> {
    type Output = Self;


    fn sub(self, other: Self) -> Self::Output {
        Point {
            x: self.x - other.x,
            y: self.y - other.y,
        }
    }
}


3.
trait UsernameWidget {
    // Get the selected username out of this widget
    fn get(&self) -> String;
}


trait AgeWidget {
    // Get the selected age out of this widget
    fn get(&self) -> u8;
}


// A form with both a UsernameWidget and an AgeWidget.
struct Form {
    username: String,
    age: u8,
}


impl UsernameWidget for Form {
    fn get(&self) -> String {
        self.username.clone()
    }
}


impl AgeWidget for Form {
    fn get(&self) -> u8 {
        self.age
    }
}


fn main() {
    let form = Form{
        username: "rustacean".to_owned(),
        age: 28,
    };


    // If you uncomment this line, you'll get an error saying 
    // "multiple `get` found". Because, after all, there are multiple methods
    // named `get`.
    // println!("{}", form.get());
    
    let username = UsernameWidget::get(&form);
    assert_eq!("rustacean".to_owned(), username);
    let age = AgeWidget::get(&form); // You can also use `<Form as AgeWidget>::get`
    assert_eq!(28, age);


    println!("Success!");
}




4.


trait Person {
    fn name(&self) -> String;
}


// Person is a supertrait of Student.
// Implementing Student requires you to also impl Person.
trait Student: Person {
    fn university(&self) -> String;
}


trait Programmer {
    fn fav_language(&self) -> String;
}


// CompSciStudent (computer science student) is a subtrait of both Programmer 
// and Student. Implementing CompSciStudent requires you to impl both supertraits.
trait CompSciStudent: Programmer + Student {
    fn git_username(&self) -> String;
}


fn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {
    format!(
        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",
        student.name(),
        student.university(),
        student.fav_language(),
        student.git_username()
    )
}


struct CSStudent {
    name: String,
    university: String,
    fav_language: String,
    git_username: String
}


// IMPLEMENT the necessary traits for CSStudent to make the code work




impl Student for CSStudent {
    fn university(&self) -> String {
        self.university.clone()
    }
}
impl Person for CSStudent {
    fn name(&self) -> String {
        self.name.clone()
    }
}
impl CompSciStudent for CSStudent {
    fn git_username(&self) -> String {
        self.git_username.clone()
    }
}


impl Programmer for CSStudent {
    fn fav_language(&self) -> String {
        self.fav_language.clone()
    }
}






fn main() {
    let student = CSStudent {
        name: "Sunfei".to_string(),
        university: "XXX".to_string(),
        fav_language: "Rust".to_string(),
        git_username: "sunface".to_string()
    };


    // FILL in the blank
    println!("{}", comp_sci_student_greeting(&student));
}


5.
use std::fmt;


// DEFINE a newtype `Pretty` here


struct Pretty(String);
impl fmt::Display for Pretty {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "\"{}\"", self.0.clone() + ", world")
    }
}


fn main() {
    let w = Pretty("hello".to_string());
    println!("w = {}", w);
}